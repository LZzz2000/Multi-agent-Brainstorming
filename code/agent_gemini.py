import time
import random
import google.generativeai as genai
import os
import PIL.Image


class Agent:




    def __init__(self, model_name: str, name: str, api_key: str, temperature: float, sleep_time: float=0) -> None:
        """Create an agent

        Args:
            model_name(str): model name
            name (str): name of this agent
            temperature (float): higher values make the output more random, while lower values make it more focused and deterministic
            sleep_time (float): sleep because of rate limits
        """

        self.model_name = model_name
        self.name = name
        self.temperature = temperature
        self.memory_lst = []
        self.sleep_time = sleep_time


        genai.configure(api_key=api_key, transport='rest')

        self.model = genai.GenerativeModel(model_name="gemini-1.5-flash")
        self.chat = self.model.start_chat()

    def query(self, prompt: str, api_key: str) -> str:
        """make a query

        Args:
            messages (list[dict]): chat history in turbo format
            max_tokens (int): max token in api call
            api_key (str): gemini api key
            temperature (float): sampling temperature

        Raises:
            OutOfQuotaException: the apikey has out of quota
            AccessTerminatedException: the apikey has been ban

        Returns:
            str: the return msg
        """
        time.sleep(1)


        ff = False
        step = 0

        while ff == False and step < 5:
            try:
                response = self.chat.send_message(prompt)
                answer = response.text
                ff = True
                break
            except Exception as e:
                print(e)
                if str(e).find('429 POST') != -1:
                    ## 短时间调用太多
                    time.sleep(60)
                if str(e).find('403 POST') != -1:
                    ## api停用
                    time.sleep(60)
                if str(e).find('500 POST') != -1:
                    ## 内部服务器错误
                    time.sleep(60)
                step += 1
        if ff == True:
            try:
                return answer
            except:
                return "error"
        else:
            return "error"

    def set_meta_prompt(self, meta_prompt: str, image_file: str):
        """Set the meta_prompt

        Args:
            meta_prompt (str): the meta prompt
        """
        img = PIL.Image.open(image_file)

        self.chat = self.model.start_chat(
            history=[
                        {"role": "user", "parts": [
                            meta_prompt,
                            img]},
                    ]
        )

    def add_event(self, event: str):
        """Add an new event in the memory

        Args:
            event (str): string that describe the event.
        """
        self.memory_lst.append({"role": "user", "content": f"{event}"})

    def add_memory(self, memory: str):
        """Monologue in the memory

        Args:
            memory (str): string that generated by the model in the last round.
        """
        self.memory_lst.append({"role": "assistant", "content": f"{memory}"})
        print(f"----- {self.name} -----\n{memory}\n")

    def ask(self, question: str):
        """Query for answer

        Args:
        """
        # query

        return self.query(question, api_key=self.gemini_api_key)

